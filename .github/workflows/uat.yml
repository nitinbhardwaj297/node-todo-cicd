name: Deploy to AWS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up AWS CLI
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Step 3: Log in to Amazon ECR
    - name: Log in to Amazon ECR
      id: ecr-login
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 867344428970.dkr.ecr.us-east-1.amazonaws.com

    # Step 4: Build Docker image
    - name: Build Docker image
      run: |
        docker build -t node-frontend .

    # Step 5: Tag and push Docker image to Amazon ECR
    - name: Tag and push image to Amazon ECR
      run: |
        # Tag the image for ECR
        docker tag node-frontend:latest 867344428970.dkr.ecr.us-east-1.amazonaws.com/node-master:latest

        # Push the image to ECR
        docker push 867344428970.dkr.ecr.us-east-1.amazonaws.com/node-master:latest

    - name: Pull Docker image from ECR
      run: |
        docker pull 867344428970.dkr.ecr.us-east-1.amazonaws.com/node-master:latest

    # Step 7: Stop the currently running container (if any)
    - name: Stop existing Docker container
      run: |
        container_id=$(docker ps -q --filter "name=node-master")
        if [ -n "$container_id" ]; then
          docker stop $container_id
          docker rm $container_id
        fi

    # Step 8: Run the new Docker container
    - name: Run new Docker container
      run: |
        docker run -d --name node-master -p 8000:8000 867344428970.dkr.ecr.us-east-1.amazonaws.com/node-master:latest
